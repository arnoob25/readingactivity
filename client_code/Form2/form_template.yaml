container:
  type: HtmlTemplate
  properties: {tooltip: '', background: '', foreground: '', border: '', visible: true,
    role: null, html: "<center style=\"font-style:italic; color:#888; margin: 3em;\"\
      >\n  <!DOCTYPE html>\n<html>\n<head>\n    <title>Canvas with Sliders</title>\n\
      </head>\n<body>\n    <h1>Canvas with Sliders</h1>\n    <canvas id=\"myCanvas\"\
      \ width=\"400\" height=\"400\"></canvas><br>\n    <label for=\"bgColor\">Background\
      \ Color:</label>\n    <input type=\"range\" min=\"0\" max=\"360\" value=\"0\"\
      \ id=\"bgColor\"><br>\n    <label for=\"circleColor\">Circle Color:</label>\n\
      \    <input type=\"range\" min=\"0\" max=\"360\" value=\"0\" id=\"circleColor\"\
      ><br>\n    <label for=\"circleSize\">Circle Size:</label>\n    <input type=\"\
      range\" min=\"10\" max=\"50\" value=\"10\" id=\"circleSize\"><br>\n    <button\
      \ id=\"randomize\">Randomize Circle Positions</button>\n    \n    <script>\n\
      \        var canvas = document.getElementById(\"myCanvas\");\n        var ctx\
      \ = canvas.getContext(\"2d\");\n        \n        var bgColorSlider = document.getElementById(\"\
      bgColor\");\n        var circleColorSlider = document.getElementById(\"circleColor\"\
      );\n        var circleSizeSlider = document.getElementById(\"circleSize\");\n\
      \        var randomizeButton = document.getElementById(\"randomize\");\n   \
      \     \n        var circles = [];\n        for (var i = 0; i < 10; i++) {\n\
      \            var newCircle;\n            do {\n                newCircle = {\n\
      \                    x: Math.random() * (canvas.width - 60) + 30,\n        \
      \            y: Math.random() * (canvas.height - 60) + 30,\n               \
      \     r: Math.random() * 20 + 10,\n                    angle: Math.random()\
      \ * 2 * Math.PI,\n                    speed: Math.random() * 0.05 + 0.01\n \
      \               };\n            } while (circles.some(function(circle) {\n \
      \               return Math.sqrt(Math.pow(circle.x - newCircle.x, 2) + Math.pow(circle.y\
      \ - newCircle.y, 2)) <= circle.r + newCircle.r;\n            }));\n        \
      \    circles.push(newCircle);\n        }\n        \n        bgColorSlider.oninput\
      \ = function() {\n            drawCanvas();\n        }\n        \n        circleColorSlider.oninput\
      \ = function() {\n            drawCanvas();\n        }\n        \n        circleSizeSlider.oninput\
      \ = function() {\n            drawCanvas();\n        }\n        \n        randomizeButton.onclick\
      \ = function() {\n            circles = [];\n            for (var i = 0; i <\
      \ 10; i++) {\n                var newCircle;\n                do {\n       \
      \             newCircle = {\n                        x: Math.random() * (canvas.width\
      \ - 60) + 30,\n                        y: Math.random() * (canvas.height - 60)\
      \ + 30,\n                        r: Math.random() * 20 + 10,\n             \
      \           angle: Math.random() * 2 * Math.PI,\n                        speed:\
      \ Math.random() * 0.05 + 0.01\n                    };\n                } while\
      \ (circles.some(function(circle) {\n                    return Math.sqrt(Math.pow(circle.x\
      \ - newCircle.x, 2) + Math.pow(circle.y - newCircle.y, 2)) <= circle.r + newCircle.r;\n\
      \                }));\n                circles.push(newCircle);\n          \
      \  }\n            drawCanvas();\n        }\n        \n        canvas.onclick\
      \ = function(event) {\n            var x = event.offsetX;\n            var y\
      \ = event.offsetY;\n            \n            for (var i = circles.length -\
      \ 1; i >= 0; i--) {\n                var dx = x - circles[i].x;\n          \
      \      var dy = y - circles[i].y;\n                if (Math.sqrt(dx * dx + dy\
      \ * dy) <= circleSizeSlider.value) {\n                    circles.splice(i,\
      \ 1);\n                    break;\n                }\n            }\n      \
      \      \n            drawCanvas();\n        }\n        \n        function drawCanvas()\
      \ {\n            ctx.fillStyle = \"hsl(\" + bgColorSlider.value + \", 100%,\
      \ 50%)\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n  \
      \          \n            for (var i = 0; i < circles.length; i++) {\n      \
      \          if (circles[i].x - circleSizeSlider.value >= 0 && circles[i].x +\
      \ circleSizeSlider.value <= canvas.width && circles[i].y - circleSizeSlider.value\
      \ >= 0 && circles[i].y + circleSizeSlider.value <= canvas.height) {\n      \
      \              ctx.beginPath();\n                    ctx.arc(circles[i].x, circles[i].y,\
      \ circleSizeSlider.value, 0, 2 * Math.PI);\n                    ctx.fillStyle\
      \ = \"hsl(\" + circleColorSlider.value + \", 100%, 50%)\";\n               \
      \     ctx.fill();\n                    \n                    circles[i].x +=\
      \ Math.cos(circles[i].angle) * circles[i].speed;\n                    circles[i].y\
      \ += Math.sin(circles[i].angle) * circles[i].speed;\n                    circles[i].angle\
      \ += circles[i].speed;\n                } else {\n                    ctx.beginPath();\n\
      \                    ctx.arc(circles[i].x, circles[i].y, circles[i].r, 0, 2\
      \ * Math.PI);\n                    ctx.fillStyle = \"hsl(\" + circleColorSlider.value\
      \ + \", 100%, 50%)\";\n                    ctx.fill();\n                   \
      \ \n                    circles[i].x += Math.cos(circles[i].angle) * circles[i].speed;\n\
      \                    circles[i].y += Math.sin(circles[i].angle) * circles[i].speed;\n\
      \                    circles[i].angle += circles[i].speed;\n               \
      \ }\n            }\n            \n            ctx.strokeStyle = \"black\";\n\
      \            ctx.lineWidth = \"2\";\n            ctx.strokeRect(1,1,canvas.width-2,canvas.height-2);\n\
      \            \n            requestAnimationFrame(drawCanvas);\n        }\n \
      \       \n        drawCanvas();\n    </script>\n</body>\n</html>\n</center>\n\
      <div anvil-slot=\"default\"></div>"}
components: []
is_package: true
custom_component: true
