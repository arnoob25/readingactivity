container:
  type: HtmlTemplate
  properties: {tooltip: '', background: '', foreground: '', border: '', visible: true,
    role: null, html: "<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        #container\
      \ {\n            width: 100%;\n            height: 200px;\n            border:\
      \ 1px solid black;\n            position: relative;\n        }\n\n        #car\
      \ {\n            width: 50px;\n            height: 50px;\n            background-color:\
      \ red;\n            position: absolute;\n            left: 0;\n        }\n\n\
      \        table,\n        th,\n        td {\n            border: 1px solid black;\n\
      \        }\n    </style>\n</head>\n\n<body>\n    <div id=\"container\">\n  \
      \      <div id=\"car\"></div>\n    </div>\n    <input type=\"range\" min=\"\
      0\" max=\"1000\" value=\"0\" id=\"forceSlider\">\n    <p id=\"forceValue\">Force:\
      \ 0 N</p>\n    <select id=\"massSelect\">\n        <option value=\"1\">1 kg</option>\n\
      \        <option value=\"2\">2 kg</option>\n        <option value=\"3\">3 kg</option>\n\
      \    </select>\n    <button id=\"simulateButton\" disabled>Simulate</button>\n\
      \    <button id=\"resetButton\" disabled>Reset</button>\n    <button id=\"recordButton\"\
      \ disabled>Record data</button>\n    <p id=\"timer\">Time: 0.00 s</p>\n    <p\
      \ id=\"acceleration\">Acceleration: 0 m/s\xb2</p>\n\n    <table id=\"dataTable\"\
      >\n        <tr>\n            <th># of experiment</th>\n            <th>Force</th>\n\
      \            <th>Mass</th>\n            <th>Acceleration</th>\n            <th>Time\
      \ to reach the end</th>\n        </tr>\n    </table>\n\n    <script>\n     \
      \   const car = document.getElementById('car');\n        const container = document.getElementById('container');\n\
      \        const forceSlider = document.getElementById('forceSlider');\n     \
      \   const forceValue = document.getElementById('forceValue');\n        const\
      \ massSelect = document.getElementById('massSelect');\n        const simulateButton\
      \ = document.getElementById('simulateButton');\n        const resetButton =\
      \ document.getElementById('resetButton');\n        const recordButton = document.getElementById('recordButton');\n\
      \        const timerElement = document.getElementById('timer');\n        const\
      \ accelerationElement = document.getElementById('acceleration');\n        const\
      \ dataTable = document.getElementById('dataTable');\n\n        let startTime\
      \ = null;\n        let animationFrameId = null;\n        let experimentCount\
      \ = 0;\n\n        forceSlider.oninput = function () {\n            simulateButton.disabled\
      \ = this.value == 0 || animationFrameId !== null;\n            if (this.value\
      \ > 0) {\n                resetButton.disabled = true;\n                recordButton.disabled\
      \ = true;\n            }\n            forceValue.textContent = 'Force: ' + this.value\
      \ + ' N';\n        };\n\n        simulateButton.onclick = function () {\n  \
      \          if (animationFrameId !== null) return; // simulation is running\n\
      \n            this.disabled = true;\n\n            const force = forceSlider.value;\n\
      \            const mass = massSelect.value; // selected mass\n            const\
      \ acceleration = force / mass;\n\n            startTime = Date.now();\n    \
      \        animationFrameId = requestAnimationFrame(function animate() {\n   \
      \             const timeElapsedInSeconds = (Date.now() - startTime) / 1000;\n\
      \                timerElement.textContent = 'Time: ' + timeElapsedInSeconds.toFixed(2)\
      \ + ' s';\n\n                const displacement = 0.5 * acceleration * Math.pow(timeElapsedInSeconds,\
      \ 2);\n                car.style.left = Math.min(displacement, container.offsetWidth\
      \ - car.offsetWidth - 2) + 'px';\n\n                accelerationElement.textContent\
      \ = 'Acceleration: ' + acceleration.toFixed(2) + ' m/s\xb2';\n\n           \
      \     if (displacement < container.offsetWidth - car.offsetWidth - 2) {\n  \
      \                  animationFrameId = requestAnimationFrame(animate);\n    \
      \            } else {\n                    resetButton.disabled = false;\n \
      \                   recordButton.disabled = false;\n                    animationFrameId\
      \ = null; // simulation ended\n                }\n            });\n        };\n\
      \n        resetButton.onclick = function () {\n            this.disabled = true;\n\
      \            simulateButton.disabled = false;\n            recordButton.disabled\
      \ = true; // disable record button after reset\n\n            cancelAnimationFrame(animationFrameId);\n\
      \            animationFrameId = null; // simulation ended\n\n            car.style.left\
      \ = '0px';\n            timerElement.textContent = 'Time: 0.00 s';\n       \
      \     accelerationElement.textContent = 'Acceleration: 0 m/s\xb2';\n       \
      \ };\n\n        recordButton.onclick = function () {\n            this.disabled\
      \ = true;\n\n            experimentCount++;\n\n            let row = dataTable.insertRow(-1);\n\
      \n            let cell1 = row.insertCell(0);\n            let cell2 = row.insertCell(1);\n\
      \            let cell3 = row.insertCell(2);\n            let cell4 = row.insertCell(3);\n\
      \            let cell5 = row.insertCell(4);\n\n            cell1.innerHTML =\
      \ experimentCount;\n            cell2.innerHTML = forceSlider.value + \" N\"\
      ;\n            cell3.innerHTML = massSelect.value + \" kg\";\n            cell4.innerHTML\
      \ = (forceSlider.value / massSelect.value).toFixed(2) + \" m/s\xb2\";\n    \
      \        cell5.innerHTML = timerElement.textContent;\n        };\n    </script>\n\
      \n\n\n\n</body>\n\n</html>"}
components: []
is_package: true
custom_component: true
